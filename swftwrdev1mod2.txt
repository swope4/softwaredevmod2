package sftwderv1mod2;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;


public class JsoupWordCount {

	public static void main(String[] args) throws IOException { // throwing input exception for the ability to call
// class object

		Map<String, Word> countMap = new HashMap<String, Word>();// hash map for us to analyze the page
		Document doc = Jsoup.connect("https://www.gutenberg.org/files/1065/1065-h/1065-h.htm").get();// the connection
		for (Element element : doc.select("p.poem")) {
			String text = element.text();
			
			for (String word : text.replaceAll("[;—:!‘’?,“.”]", "").split(" ")) {
				Word wordObj = countMap.get(word);// declaration of wordObj from class Word
				if (wordObj == null) { // if wordobj equals null then just goto a new word
					wordObj = new Word();// new word
					wordObj.word = word;// setting the object equal to what word is
					wordObj.count = 0;
					countMap.put(word, wordObj);

				}
				wordObj.count++;
			}

		}
		ArrayList<Word> sortedWords = new ArrayList<Word>(countMap.values());

		Collections.sort(sortedWords, Collections.reverseOrder((a, b) -> {
			return a.count - b.count;
		}));

		for (Word word : sortedWords) {
			System.out.println(word.count + " " + word.word);
			
		}

		/*
		 * // to the page String text = doc.body().text();// the string to text
		 * BufferedReader reader = new BufferedReader( new InputStreamReader(new
		 * ByteArrayInputStream(text.getBytes(StandardCharsets.UTF_8)))); String line;//
		 * reader to analyze the amount of words being taken in int count = 0; boolean
		 * go = false; while ((line = reader.readLine()) != null) {// while loop for it
		 * take in the the words
		 * 
		 * String[] words = line.split("[^A-ZÃƒâ€¦Ãƒâ€žÃƒâ€“a-zÃƒÂ¥ÃƒÂ¤ÃƒÂ¶â€]+");//
		 * discluding these charecters
		 * 
		 * // if(Words[i] == 0) { // //
		 * 
		 * for (String word : words) { // enhaced for loop and declaration of word. so
		 * for word in words word = word.toLowerCase(); if (word.equals("raven")) {
		 * count++; if (count == 5) { go = true; } } if (go == false) { continue; } if
		 * (word.equals("end")) { // System.out.println(word); break; }
		 * 
		 * if ("".equals(word)) {// for words in words if it contains a string we
		 * continue continue; }
		 * 
		 * Word wordObj = countMap.get(word);// declaration of wordObj from class Word
		 * if (wordObj == null) { // if wordobj equals null then just goto a new word
		 * wordObj = new Word();// new word wordObj.word = word;// setting the object
		 * equal to what word is wordObj.count = 0; countMap.put(word, wordObj); }
		 * wordObj.count++;
		 * 
		 * }
		 * 
		 * }
		 * 
		 * reader.close();
		 * 
		 * SortedSet<Word> sortedWords = new TreeSet<Word>(countMap.values());
		 * 
		 * for (Word word : sortedWords) { count++;
		 * 
		 * System.out.println(word.count + " " + word.word); if (word.count >= count) {
		 * System.out.println(word.count + "      " + word.word +
		 * " is the word with the highest count");
		 * 
		 * }
		 * 
		 * }
		 */

	}

public static class Word implements Comparable<Word> {
String word;
int count;

@Override
public boolean equals(Object obj) {
return word.equals(((Word) obj).word);
}

@Override
public int compareTo(Word thisword) {
return thisword.count;
}
}
}